import * as LogLevels from '../types/_LogLevels';
export class AbstractLogger {
    constructor(opts) {
        this.opts = opts || {};
        this.currentLogLevel = this.getDefaultLogLevel();
    }
    setPrefix(prefix) {
        this.opts.prefix = prefix;
    }
    setLogLevel(logLevel) {
        this.currentLogLevel = logLevel;
    }
    debug(...args) {
        this.print(console.debug, LogLevels.DEBUG, args);
    }
    info(...args) {
        this.print(console.info, LogLevels.INFO, args);
    }
    log(...args) {
        this.print(console.log, LogLevels.LOG, args);
    }
    warn(...args) {
        this.print(console.warn, LogLevels.WARN, args);
    }
    error(...args) {
        this.print(console.error, LogLevels.ERROR, args);
    }
    group(...args) {
        this.print(console.group, LogLevels.GROUP, args);
    }
    groupCollapsed(...args) {
        this.print(console.groupCollapsed, LogLevels.GROUP, args);
    }
    groupEnd() {
        console.groupEnd();
    }
    print(consoleFunc, logLevel, args) {
        if (this.currentLogLevel > logLevel) {
            return;
        }
        consoleFunc(...this.getArgs(logLevel, args));
    }
    getArgs(logLevel, args) {
        const prefix = this.getPrefix(logLevel);
        if (prefix) {
            return [...prefix, ...args];
        }
        return args;
    }
    getPrefix(logLevel) {
        if (this.opts.prefix) {
            return this.colorPrefix(logLevel, this.opts.prefix);
        }
    }
    getDefaultLogLevel() {
        return LogLevels.DEBUG;
    }
}
//# sourceMappingURL=_AbstractLogger.js.map