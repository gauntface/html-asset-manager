{"version":3,"file":"browser.js","sources":["../../src/browser/_BrowserLogger.ts","../../src/shared/_AbstractLogger.ts","../../src/types/_LogLevels.ts","../../src/types/_LogColors.ts","../../src/browser/browser.ts"],"sourcesContent":["import {AbstractLogger} from '../shared/_AbstractLogger';\nimport * as LogLevels from '../types/_LogLevels';\nimport * as LogColors from '../types/_LogColors';\n\nexport class BrowserLogger extends AbstractLogger {\n  protected colorPrefix(logLevel: LogLevels.LogLevel,prefix: string): string[] {\n    const prefixStyles = this.getLevelCSS(logLevel);\n    return [`%c${prefix}`, prefixStyles];\n  }\n\n  private getLevelCSS(logLevel: LogLevels.LogLevel): string | null {\n    function getStyles(color: string): string {\n      return `background: ${color}; color: white; padding: 2px 0.5em; border-radius: 0.5em`;\n    }\n\n    switch(logLevel) {\n      case LogLevels.DEBUG:\n        return getStyles(LogColors.DEBUG);\n      case LogLevels.INFO:\n        return getStyles(LogColors.INFO);\n      case LogLevels.WARN:\n        return getStyles(LogColors.WARN);\n      case LogLevels.ERROR:\n        return getStyles(LogColors.ERROR);\n      case LogLevels.GROUP:\n        return getStyles(LogColors.GROUP);\n      case LogLevels.LOG:\n      default:\n        return getStyles(LogColors.LOG);\n    }\n  }\n}\n","import * as LogLevels from '../types/_LogLevels';\n\nexport type LoggerOpts = {\n  prefix?: string;\n};\n\nexport abstract class AbstractLogger {\n  private opts: LoggerOpts;\n  private currentLogLevel: LogLevels.LogLevel;\n\n  constructor(opts?: LoggerOpts) {\n    this.opts = opts || {};\n    this.currentLogLevel = this.getDefaultLogLevel();\n  }\n\n  setPrefix(prefix: string) {\n    this.opts.prefix = prefix;\n  }\n\n  setLogLevel(logLevel: LogLevels.LogLevel) {\n    this.currentLogLevel = logLevel;\n  }\n\n  // tslint:disable-next-line:no-any\n  debug(...args: any[]) {\n    this.print(console.debug, LogLevels.DEBUG, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  info(...args: any[]) {\n    this.print(console.info, LogLevels.INFO, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  log(...args: any[]) {\n    this.print(console.log, LogLevels.LOG, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  warn(...args: any[]) {\n    this.print(console.warn, LogLevels.WARN, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  error(...args: any[]) {\n    this.print(console.error, LogLevels.ERROR, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  group(...args: any[]) {\n    this.print(console.group, LogLevels.GROUP, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  groupCollapsed(...args: any[]) {\n    this.print(console.groupCollapsed, LogLevels.GROUP, args);\n  }\n\n  groupEnd() {\n    console.groupEnd();\n  }\n\n  // tslint:disable-next-line:no-any\n  private print(consoleFunc: Function, logLevel: LogLevels.LogLevel, args: any[]) {\n    if (this.currentLogLevel > logLevel) {\n      return;\n    }\n\n    consoleFunc(...this.getArgs(logLevel, args));\n  }\n\n  // tslint:disable-next-line:no-any\n  private getArgs(logLevel: LogLevels.LogLevel, args: any[]): any[] {\n    const prefix = this.getPrefix(logLevel);\n    if (prefix) {\n      return [...prefix, ...args];\n    }\n    return args;\n  }\n\n  private getPrefix(logLevel: LogLevels.LogLevel): string[]|void {\n    if (this.opts.prefix) {\n      return this.colorPrefix(logLevel, this.opts.prefix);\n    }\n  }\n\n  protected getDefaultLogLevel(): LogLevels.LogLevel {\n    return LogLevels.DEBUG;\n  }\n\n  protected abstract colorPrefix(level: LogLevels.LogLevel, prefix: string): string[];\n}\n","export const DEBUG = 0;\nexport const INFO = 1;\nexport const LOG = 2;\nexport const WARN = 3;\nexport const ERROR = 4;\nexport const GROUP = 5;\nexport const SILENCE = 6;\nexport type LogLevel = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n","export const DEBUG = '#636e72';\nexport const INFO = '#487eb0';\nexport const LOG = '#4cd137';\nexport const WARN = '#e1b12c';\nexport const ERROR = '#e74c3c';\nexport const GROUP = '#00a8ff';\n","import {BrowserLogger} from './_BrowserLogger';\n\n// This class exists solely so the default export is the logger\n// with log methods while making the underlying logger available.\nclass BrowserNamespace extends BrowserLogger {\n  get Logger() {\n    return BrowserLogger;\n  }\n}\n\n// logger will be used as part of the namespace\n// i.e. hopin.**logger** will be the HopinLoggerBrowser instance\nconst logger = new BrowserNamespace();\nexport {logger};"],"names":["BrowserLogger","[object Object]","opts","this","currentLogLevel","getDefaultLogLevel","prefix","logLevel","args","print","console","debug","info","log","warn","error","group","groupCollapsed","groupEnd","consoleFunc","getArgs","getPrefix","colorPrefix","getLevelCSS","getStyles","color","logger","Logger"],"mappings":"yCAIaA,gBCMXC,YAAYC,GACVC,KAAKD,KAAOA,GAAQ,GACpBC,KAAKC,gBAAkBD,KAAKE,qBAG9BJ,UAAUK,GACRH,KAAKD,KAAKI,OAASA,EAGrBL,YAAYM,GACVJ,KAAKC,gBAAkBG,EAIzBN,SAASO,GACPL,KAAKM,MAAMC,QAAQC,MCzBF,EDyB0BH,GAI7CP,QAAQO,GACNL,KAAKM,MAAMC,QAAQE,KC7BH,ED6ByBJ,GAI3CP,OAAOO,GACLL,KAAKM,MAAMC,QAAQG,ICjCJ,EDiCwBL,GAIzCP,QAAQO,GACNL,KAAKM,MAAMC,QAAQI,KCrCH,EDqCyBN,GAI3CP,SAASO,GACPL,KAAKM,MAAMC,QAAQK,MCzCF,EDyC0BP,GAI7CP,SAASO,GACPL,KAAKM,MAAMC,QAAQM,MC7CF,ED6C0BR,GAI7CP,kBAAkBO,GAChBL,KAAKM,MAAMC,QAAQO,eClDF,EDkDmCT,GAGtDP,WACES,QAAQQ,WAIFjB,MAAMkB,EAAuBZ,EAA8BC,GAC7DL,KAAKC,gBAAkBG,GAI3BY,KAAehB,KAAKiB,QAAQb,EAAUC,IAIhCP,QAAQM,EAA8BC,GAC5C,MAAMF,EAASH,KAAKkB,UAAUd,GAC9B,OAAID,EACK,IAAIA,KAAWE,GAEjBA,EAGDP,UAAUM,GAChB,GAAIJ,KAAKD,KAAKI,OACZ,OAAOH,KAAKmB,YAAYf,EAAUJ,KAAKD,KAAKI,QAItCL,qBACR,OCvFiB,IFKTA,YAAYM,EAA6BD,GAEjD,MAAO,CAAC,KAAKA,IADQH,KAAKoB,YAAYhB,IAIhCN,YAAYM,GAClB,SAASiB,EAAUC,GACjB,MAAO,eAAeA,4DAGxB,OAAOlB,GACL,KEhBe,EFiBb,OAAOiB,EGjBM,WHkBf,KEjBc,EFkBZ,OAAOA,EGlBK,WHmBd,KEjBc,EFkBZ,OAAOA,EGlBK,WHmBd,KElBe,EFmBb,OAAOA,EGnBM,WHoBf,KEnBe,EFoBb,OAAOA,EGpBM,WHqBf,KExBa,EFyBb,QACE,OAAOA,EG1BI,mBCUbE,EAAS,IARf,cAA+B1B,EAC7B2B,aACE,OAAO3B"}